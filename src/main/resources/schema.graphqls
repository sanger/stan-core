scalar Address
scalar Timestamp
scalar Date

enum UserRole {
    disabled
    normal
    admin
}

enum LabwareState {
    empty
    active
    discarded
    released
    destroyed
}

type User {
    username: String!
    role: UserRole!
}

type LoginResult {
    message: String,
    user: User,
}

type Medium {
    name: String!,
}

type Fixative {
    name: String!,
}

type MouldSize {
    name: String!,
}

type TissueType {
    name: String!,
    spatialLocations: [SpatialLocation!]!,
}

type SpatialLocation {
    name: String!,
    code: Int!,
    tissueType: TissueType!,
}

type Hmdmc {
    hmdmc: String!
    enabled: Boolean!
}

type LabelType {
    name: String!,
}

type LabwareType {
    name: String!,
    numRows: Int!,
    numColumns: Int!,
    labelType: LabelType,
}

type Species {
    name: String!
    enabled: Boolean!
}

type Donor {
    donorName: String!
    lifeStage: LifeStage!
    species: Species!
}

type BioState {
    name: String!
}

type Tissue {
    externalName: String!,
    replicate: Int!,
    spatialLocation: SpatialLocation!,
    donor: Donor!,
    hmdmc: Hmdmc,
    mouldSize: MouldSize!,
    medium: Medium!,
    fixative: Fixative!,
}

type Sample {
    id: Int!
    section: Int
    tissue: Tissue!
    bioState: BioState!
}

type Slot {
    address: Address!,
    labwareId: Int!,
    samples: [Sample!]!,
    block: Boolean!,
    blockHighestSection: Int,
}

type Labware {
    id: Int!
    barcode: String!
    labwareType: LabwareType!
    slots: [Slot!]!
    released: Boolean!
    destroyed: Boolean!
    discarded: Boolean!
    state: LabwareState!
    created: Timestamp!
}

enum LifeStage {
    adult
    paediatric
    fetal
}

input BlockRegisterRequest {
    donorIdentifier: String!
    lifeStage: LifeStage!
    hmdmc: String
    tissueType: String!
    spatialLocation: Int!
    replicateNumber: Int!
    externalIdentifier: String!
    highestSection: Int!
    labwareType: String!
    medium: String!
    fixative: String!
    mouldSize: String!
    species: String!
    existingTissue: Boolean
}

input RegisterRequest {
    blocks: [BlockRegisterRequest!]!,
}

input SectionRegisterContent {
    address: Address!
    species: String!
    hmdmc: String
    donorIdentifier: String!
    lifeStage: LifeStage!
    externalIdentifier: String!
    tissueType: String!
    spatialLocation: Int!
    replicateNumber: Int!
    fixative: String!
    medium: String!
    sectionNumber: Int!
    sectionThickness: Int
}

input SectionRegisterLabware {
    labwareType: String!
    externalBarcode: String!
    contents: [SectionRegisterContent!]!
}

input SectionRegisterRequest {
    labware: [SectionRegisterLabware!]!
}

type RegisterClash {
    tissue: Tissue!
    labware: [Labware!]!
}

type RegisterResult {
    labware: [Labware!]!
    clashes: [RegisterClash!]!
}

input PlanRequestSource {
    barcode: String!,
    address: Address,
}

type OperationType {
    name: String!,
}

type PlanAction {
    source: Slot!,
    destination: Slot!,
    sample: Sample!,
    newSection: Int,
}

type PlanOperation {
    operationType: OperationType,
    planActions: [PlanAction!]!,
}

input PlanRequestAction {
    address: Address!,
    sampleId: Int!,
    sampleThickness: Int,
    source: PlanRequestSource!,
}

input PlanRequestLabware {
    labwareType: String!,
    barcode: String,
    actions: [PlanRequestAction!]!,
}

input PlanRequest {
    operationType: String!,
    labware: [PlanRequestLabware!]!,
}

input AddressCommentInput {
    address: Address!,
    commentId: Int!,
}

input CancelPlanAction {
    destinationAddress: Address!
    sampleId: Int!
    newSection: Int
}

input ConfirmOperationLabware {
    barcode: String!
    cancelled: Boolean
    cancelledActions: [CancelPlanAction!]
    addressComments: [AddressCommentInput!]
}

input ConfirmOperationRequest {
    labware: [ConfirmOperationLabware!]!
}

input ConfirmSection {
    destinationAddress: Address!
    sampleId: Int!
    newSection: Int!
}

input ConfirmSectionLabware {
    barcode: String!
    cancelled: Boolean
    confirmSections: [ConfirmSection!]
    addressComments: [AddressCommentInput!]
}

input ConfirmSectionRequest {
    labware: [ConfirmSectionLabware!]!
    sasNumber: String
}

input SlotCopyContent {
    sourceBarcode: String!
    sourceAddress: Address!
    destinationAddress: Address!
}

input SlotCopyRequest {
    labwareType: String!
    operationType: String!
    contents: [SlotCopyContent!]!
    sasNumber: String
}

type Action {
    source: Slot!,
    destination: Slot!,
    operationId: Int!,
    sample: Sample!,
}

type Operation {
    id: Int!
    operationType: OperationType!
    actions: [Action!]!
    user: User!
    performed: Timestamp!
}

type ConfirmOperationResult {
    labware: [Labware!]!,
    operations: [Operation!]!,
}

type PlanResult {
    labware: [Labware!]!,
    operations: [PlanOperation!]!,
}

type Printer {
    name: String!
    labelTypes: [LabelType!]!
}

type Comment {
    id: Int!
    text: String!
    category: String!
    enabled: Boolean!
}

type ReleaseDestination {
    name: String!
    enabled: Boolean!
}

type ReleaseRecipient {
    username: String!
    enabled: Boolean!
}

type Release {
    id: Int!
    labware: Labware!
    destination: ReleaseDestination!
    recipient: ReleaseRecipient!
}

type ReleaseResult {
    releases: [Release!]!
}

input ReleaseRequest {
    barcodes: [String!]!
    destination: String!
    recipient: String!
}

input ExtractRequest {
    barcodes: [String!]!
    labwareType: String!
    sasNumber: String
}

type OperationResult {
    labware: [Labware!]!
    operations: [Operation!]!
}

type DestructionReason {
    id: Int!
    text: String!
    enabled: Boolean!
}

type Destruction {
    labware: Labware
    user: User
    destroyed: Timestamp
    reason: DestructionReason
}

type DestroyResult {
    destructions: [Destruction!]!
}

input DestroyRequest {
    barcodes: [String!]!
    reasonId: Int!
}

type StoredItem {
    barcode: String!
    location: Location!
    address: Address
}

type UnstoredItem {
    barcode: String!
    address: Address
}

type Size {
    numRows: Int!
    numColumns: Int!
}

"""A traversal order for a grid."""
enum GridDirection {
    """Right across the top row, then down to the next row, etc."""
    RightDown
    """Down the leftmost column, then right to the next column, etc."""
    DownRight
    """Right across the bottom row, then up to the next row, etc."""
    RightUp
    """Up the leftmost column, then right to the next column, etc."""
    UpRight
}

type Location {
    id: Int!
    barcode: String!
    fixedName: String
    customName: String
    address: Address
    size: Size
    parent: LinkedLocation
    stored: [StoredItem!]!
    children: [LinkedLocation!]!
    direction: GridDirection
    qualifiedNameWithFirstBarcode: String
}

type LinkedLocation {
    barcode: String!
    fixedName: String
    customName: String
    address: Address
}

type UnstoreResult {
    numUnstored: Int!
    unstored: [UnstoredItem!]!
}

type FindEntry {
    sampleId: Int!
    labwareId: Int!
}

type LabwareLocationEntry {
    labwareId: Int!
    locationId: Int!
    address: Address
}

type FindResult {
    entries: [FindEntry!]!
    samples: [Sample!]!
    labware: [Labware!]!
    locations: [Location!]!
    labwareLocations: [LabwareLocationEntry!]!
    numRecords: Int!
}

input FindRequest {
    labwareBarcode: String
    donorName: String
    tissueExternalName: String
    tissueTypeName: String
    maxRecords: Int
    createdMin: Date
    createdMax: Date
}

type HistoryEntry {
    eventId: Int!
    type: String!
    time: Timestamp!
    sourceLabwareId: Int!
    destinationLabwareId: Int!
    sampleId: Int
    username: String!
    details: [String!]!
}

type History {
    entries: [HistoryEntry!]!
    labware: [Labware!]!
    samples: [Sample!]!
}

type PlanData {
    sources: [Labware!]!
    plan: PlanOperation!
    destination: Labware!
}

type Project {
    name: String!
    enabled: Boolean!
}

type CostCode {
    code: String!
    enabled: Boolean!
}

type SasType {
    name: String!
    enabled: Boolean!
}

enum SasStatus {
    active
    paused
    completed
    failed
}

type SasNumber {
    sasType: SasType!
    project: Project!
    costCode: CostCode!
    sasNumber: String!
    status: SasStatus!
}

type Query {
    user: User
    tissueTypes: [TissueType!]!
    labwareTypes: [LabwareType!]!
    hmdmcs(includeDisabled: Boolean): [Hmdmc!]!
    mediums: [Medium!]!
    fixatives: [Fixative!]!
    mouldSizes: [MouldSize!]!
    species(includeDisabled: Boolean): [Species!]!
    labware(barcode: String!): Labware!
    printers(labelType: String): [Printer!]!
    comments(category: String, includeDisabled: Boolean): [Comment!]!
    releaseDestinations(includeDisabled: Boolean): [ReleaseDestination!]!
    releaseRecipients(includeDisabled: Boolean): [ReleaseRecipient!]!
    destructionReasons(includeDisabled: Boolean): [DestructionReason!]!
    projects(includeDisabled: Boolean): [Project!]!
    costCodes(includeDisabled: Boolean): [CostCode!]!
    sasTypes(includeDisabled: Boolean): [SasType!]!
    sasNumbers(status: [SasStatus!]): [SasNumber!]!
    sasNumber(sasNumber: String!): SasNumber!
    users(includeDisabled: Boolean): [User!]!
    find(request: FindRequest!): FindResult!
    planData(barcode: String!): PlanData!

    historyForSampleId(sampleId: Int!): History!
    historyForExternalName(externalName: String!): History!
    historyForDonorName(donorName: String!): History!
    historyForLabwareBarcode(barcode: String!): History!

    location(locationBarcode: String!): Location!
    stored(barcodes: [String!]!): [StoredItem!]!
}

type Mutation {
    login(username: String!, password: String!): LoginResult!
    logout: String
    register(request: RegisterRequest!): RegisterResult!
    registerSections(request: SectionRegisterRequest): RegisterResult!
    plan(request: PlanRequest!): PlanResult!
    printLabware(printer: String!, barcodes: [String!]!): String
    confirmOperation(request: ConfirmOperationRequest!): ConfirmOperationResult!
    confirmSection(request: ConfirmSectionRequest!): OperationResult!
    release(request: ReleaseRequest!): ReleaseResult!
    extract(request: ExtractRequest!): OperationResult!
    destroy(request: DestroyRequest!): DestroyResult!
    slotCopy(request: SlotCopyRequest!): OperationResult!
    addComment(category: String!, text: String!): Comment!
    setCommentEnabled(commentId: Int!, enabled: Boolean!): Comment!
    addDestructionReason(text: String!): DestructionReason!
    setDestructionReasonEnabled(text: String!, enabled: Boolean!): DestructionReason!
    addHmdmc(hmdmc: String!): Hmdmc!
    setHmdmcEnabled(hmdmc: String!, enabled: Boolean!): Hmdmc!
    addReleaseDestination(name: String!): ReleaseDestination!
    setReleaseDestinationEnabled(name: String!, enabled: Boolean!): ReleaseDestination!
    addReleaseRecipient(username: String!): ReleaseRecipient!
    setReleaseRecipientEnabled(username: String!, enabled: Boolean!): ReleaseRecipient!
    addSpecies(name: String!): Species!
    setSpeciesEnabled(name: String!, enabled: Boolean!): Species!
    addProject(name: String!): Project!
    setProjectEnabled(name: String!, enabled: Boolean!): Project!
    addCostCode(code: String!): CostCode!
    setCostCodeEnabled(code: String!, enabled: Boolean!): CostCode!
    addSasType(name: String!): SasType!
    setSasTypeEnabled(name: String!, enabled: Boolean!): SasType!
    createSasNumber(prefix: String!, sasType: String!, project: String!, costCode: String!): SasNumber!
    updateSasNumberStatus(sasNumber: String!, status: SasStatus!, commentId: Int): SasNumber!

    addUser(username: String!): User!
    setUserRole(username: String!, role: UserRole!): User!

    storeBarcode(barcode: String!, locationBarcode: String!, address: Address): StoredItem!
    unstoreBarcode(barcode: String!): UnstoredItem
    empty(locationBarcode: String!): UnstoreResult!
    setLocationCustomName(locationBarcode: String!, customName: String): Location!
}
