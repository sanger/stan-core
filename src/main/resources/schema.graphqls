"""A row/column combination, either in the form "B5" (row 2, column 5), or "32,15" (row 32, column 15)"""
scalar Address
"""A point in time, typically in the format yyyy-mm-dd HH:MM:SS."""
scalar Timestamp
"""A date, typically in the format yyyy-mm-dd."""
scalar Date

"""The levels of user privilege."""
enum UserRole {
    """User cannot record anything."""
    disabled
    """User can record work."""
    normal
    """User can record work and can perform admin actions."""
    admin
}

"""The state of an item of labware."""
enum LabwareState {
    """The labware contains no samples."""
    empty
    """The labware contains samples and can be used as a source in operations."""
    active
    """The labware has been used and discarded."""
    discarded
    """The labware has been given out to another team or organisation."""
    released
    """The labware has been destroyed for a specific reason."""
    destroyed
    """The labware has been used but may still be stored."""
    used
}

"""A pass or fail result."""
enum PassFail {
    pass
    fail
}

"""A type of control."""
enum ControlType {
    positive
    negative
}

"""A stage of life that an individual has reached when tissue is collected."""
enum LifeStage {
    adult
    paediatric
    fetal
}

"""Some information about the costing of a slide."""
enum SlideCosting {
    Faculty, SGP
}

"""A user, who is associated with performing actions in the application."""
type User {
    username: String!
    role: UserRole!
}

"""The result of an attempt to log in."""
type LoginResult {
    """The message describing the result of the login, if any."""
    message: String
    """The authenticated user, if any."""
    user: User
}

"""A chemical a sample is put in."""
type Medium {
    name: String!
}

"""A chemical used to fix a sample."""
type Fixative {
    name: String!
    enabled: Boolean!
}

"""The type of tissue, typically an organ."""
type TissueType {
    name: String!
    """The possible spatial locations for tissue of this type."""
    spatialLocations: [SpatialLocation!]!
}

"""A location in an organ that tissue was taken from."""
type SpatialLocation {
    name: String!
    """The int code used to identify this spatial location in the particular tissue type."""
    code: Int!
    """The tissue type (organ) to which this location belongs."""
    tissueType: TissueType!
}

"""A permission number that can be linked to tissue."""
type Hmdmc {
    """The HMDMC code for this permission."""
    hmdmc: String!
    enabled: Boolean!
}

"""A type of label that can be printed, typically including a barcode and some other information."""
type LabelType {
    name: String!
}

"""A type of labware, such as slides and tubes."""
type LabwareType {
    name: String!
    """The number of rows in an item of this labware type."""
    numRows: Int!
    """The number of columns in an item of this labware type."""
    numColumns: Int!,
    """The type of label that should be used for this labware type."""
    labelType: LabelType,
}

"""A species, such as human, to which tissue may belong."""
type Species {
    name: String!
    enabled: Boolean!
}

"""A particular individual from which one or more instances of tissue may be taken."""
type Donor {
    donorName: String!
    """The stage of life of this donor at the point the tissue was collected."""
    lifeStage: LifeStage!
    species: Species!
}

"""The state of a particular sample. As samples are created in new labware by different operations, it is associated with new bio states."""
type BioState {
    name: String!
}

"""A piece of tissue from which multiple samples may originate."""
type Tissue {
    externalName: String
    """A number (optionall followed by a letter) that helps to distinguish this tissue from other similar tissues."""
    replicate: String
    """The location in a particular organ from which this tissue was taken."""
    spatialLocation: SpatialLocation!
    """The individual from whom this tissue was taken."""
    donor: Donor!
    hmdmc: Hmdmc
    """The medium used on this tissue."""
    medium: Medium!
    """The fixative used on this tissue."""
    fixative: Fixative!
    """The date the original sample was collected, if known."""
    collectionDate: Date
}

"""A particular sample of tissue, in a particular state."""
type Sample {
    id: Int!
    """An optional number describing the particular slice through the block of tissue that this sample came from."""
    section: Int
    """The tissue this sample is derived from."""
    tissue: Tissue!
    """The state of this particular sample."""
    bioState: BioState!
}

"""A slot in a piece of labware, which may contain samples."""
type Slot {
    """The address of this slot inside its labware. No two slots in the same item of labware have the same address."""
    address: Address!
    """The id of the labware to which the slot belongs."""
    labwareId: Int!
    """The list of samples contained in this slot. May be empty."""
    samples: [Sample!]!
    """Is this slot a block of tissue? Blocks have different properties from sections."""
    block: Boolean!
    """For blocks, what is the highest section number already taken from this block?"""
    blockHighestSection: Int
}

type Labware {
    """The unique id of this labware."""
    id: Int!
    """The unique barcode of this labware."""
    barcode: String!
    """The external barcode of this labware, as input by the user."""
    externalBarcode: String
    """The type of labware."""
    labwareType: LabwareType!
    """The slots in this labware. The number of slots and their addresses are determined by the labware type."""
    slots: [Slot!]!
    """Has this labware been released?"""
    released: Boolean!
    """Has this labware been destroyed?"""
    destroyed: Boolean!
    """Has this labware been discarded?"""
    discarded: Boolean!
    """Has this labware been marked as used?"""
    used: Boolean!
    """The state, derived from the contents and other fields on the labware."""
    state: LabwareState!
    """The time when this labware was created in the application."""
    created: Timestamp!
}

"""A solution used in an operation."""
type Solution {
    """The unique name of the solution."""
    name: String!
    """Whether the solution is available for use."""
    enabled: Boolean!
}

"""A project in Omero."""
type OmeroProject {
    """The name of the Omero project."""
    name: String!
    """Whether the Omero project is available for use in Stan."""
    enabled: Boolean!
}

"""A request to register a new block of tissue."""
input BlockRegisterRequest {
    """The string to use as the donor name."""
    donorIdentifier: String!
    """The life stage of the donor."""
    lifeStage: LifeStage!
    """The HMDMC to use for the tissue."""
    hmdmc: String
    """The name of the tissue type (the organ from which the tissue is taken)."""
    tissueType: String!
    """The code for the spatial location from which the tissue is taken."""
    spatialLocation: Int!
    """The string to use for the replicate number of the tissue."""
    replicateNumber: String!
    """The external identifier used to identify the tissue."""
    externalIdentifier: String!
    """The highest section already taken from the tissue block."""
    highestSection: Int!
    """The name of the type of labware containing the block."""
    labwareType: String!
    """The medium used for the tissue."""
    medium: String!
    """The fixative used for the tissue."""
    fixative: String!
    """The species of the donor."""
    species: String!
    """Is this a new block of tissue already in the application's database?"""
    existingTissue: Boolean
    """The date the original sample was collected, if known."""
    sampleCollectionDate: Date
}

"""A request to register one or more blocks of tissue."""
input RegisterRequest {
    blocks: [BlockRegisterRequest!]!
    workNumbers: [String!]!
}

"""Information about a section of tissue (already taken from some a block tracked elsewhere) to register."""
input SectionRegisterContent {
    """The address of the slot in the labware where this section should be created."""
    address: Address!
    """The species from which this section originates."""
    species: String!
    """A HMDMC number, if any, to associate with this sample."""
    hmdmc: String
    """A name for the donor."""
    donorIdentifier: String!
    """The life stage of the donor."""
    lifeStage: LifeStage!
    """The external name for the tissue from which this section was taken."""
    externalIdentifier: String!
    """The name of the tissue type (organ) for the tissue."""
    tissueType: String!
    """The code for the spatial location from which the tissue is taken."""
    spatialLocation: Int!
    """The string to use for the replicate number of the tissue."""
    replicateNumber: String!
    """The fixative used for the tissue."""
    fixative: String!
    """The medium used for the tissue."""
    medium: String!
    """The section number of this particular section from its original tissue block."""
    sectionNumber: Int!
    """The thickness, if known, of this section."""
    sectionThickness: Int
}

"""A request to register one or more sections into one piece of labware."""
input SectionRegisterLabware {
    """The name of the type of labware."""
    labwareType: String!
    """The external barcode of this labware."""
    externalBarcode: String!
    """The contents of the labware (new sections)."""
    contents: [SectionRegisterContent!]!
}

"""A request to register one or more labware containing new sections."""
input SectionRegisterRequest {
    """The details of the labware being registered."""
    labware: [SectionRegisterLabware!]!
    """The work number to associate with the registration."""
    workNumber: String!
}

"""Data about registering a new original sample."""
input OriginalSampleData {
    """The string to use as the donor name."""
    donorIdentifier: String!
    """The life stage of the donor."""
    lifeStage: LifeStage!
    """The HMDMC to use for the tissue."""
    hmdmc: String
    """The name of the tissue type (the organ from which the tissue is taken)."""
    tissueType: String!
    """The code for the spatial location from which the tissue is taken."""
    spatialLocation: Int!
    """The string to use for the replicate number of the tissue (optional)."""
    replicateNumber: String
    """The external identifier used to identify the tissue."""
    externalIdentifier: String
    """The name of the type of labware containing the sample."""
    labwareType: String!
    """The solution used for the tissue."""
    solution: String!
    """The fixative used for the tissue."""
    fixative: String!
    """The species of the donor."""
    species: String!
    """The date the original sample was collected, if known."""
    sampleCollectionDate: Date
}

"""A request to register one or more original samples of tissue."""
input OriginalSampleRegisterRequest {
    samples: [OriginalSampleData!]!
}


"""Information about a clash, where a given tissue name already exists in the database."""
type RegisterClash {
    """The tissue with the given name."""
    tissue: Tissue!
    """The existing labware containing the tissue at registration."""
    labware: [Labware!]!
}

"""A labware barcode and name of a solution."""
type LabwareSolutionName {
    """The barcode of an item of labware."""
    barcode: String!
    """The name of a solution."""
    solutionName: String!
}

"""The result of a register request. It is expected to contain either labware or clashes."""
type RegisterResult {
    """The labware created."""
    labware: [Labware!]!
    """The clashes that prevented registration."""
    clashes: [RegisterClash!]!
    """The names of solutions used for labware barcodes, if any."""
    labwareSolutions: [LabwareSolutionName]!
}

"""A description of a source slot in a plan request."""
input PlanRequestSource {
    """The barcode of the source labware."""
    barcode: String!
    """The address of the source slot in its labware. May be assumed to be A1 if omitted."""
    address: Address
}

"""A type of operation that may be recorded."""
type OperationType {
    name: String!
}

"""A planned action in a planned operation; describes a sample moving from one slot to another."""
type PlanAction {
    """The source slot that contains the sample."""
    source: Slot!
    """The destination slot to which we want to add a sample."""
    destination: Slot!
    """The sample in the source labware that we want to act upon."""
    sample: Sample!
    """The new section number, if the source is a block and it is being sectioned."""
    newSection: Int
}

"""A planned operation."""
type PlanOperation {
    """The type of operation planned."""
    operationType: OperationType
    """The planned actions that describe the movement of samples in this operation."""
    planActions: [PlanAction!]!
}

"""A specification of an action in a plan request. Describes the action on a sample being transferred between slots."""
input PlanRequestAction {
    """The intended address of the sample in the destination labware."""
    address: Address!
    """The id of the existing sample."""
    sampleId: Int!
    """The thickness (if specified) of the new sample."""
    sampleThickness: Int
    """The source of the sample (describing a slot in some existing labware)."""
    source: PlanRequestSource!
}

"""A specification of new labware to be created for a plan request."""
input PlanRequestLabware {
    """The name of the type of labware."""
    labwareType: String!
    """The barcode of the new labware, if the user needs to specify it."""
    barcode: String
    """The lot number of the new labware, if any."""
    lotNumber: String
    """The costing of the labware, if any."""
    costing: SlideCosting
    """The actions, specifying which samples are transferred between which slots."""
    actions: [PlanRequestAction!]!
}

"""A request to create a plan operation."""
input PlanRequest {
    """The name of the type of operation we are planning."""
    operationType: String!
    """The specification of the labware created for the plan."""
    labware: [PlanRequestLabware!]!
}

"""A combination of an address and a comment id, used to record comments in particular slots of labware."""
input AddressCommentInput {
    """The address of a slot."""
    address: Address!
    """The id of a comment in the database."""
    commentId: Int!
}

"""A request to cancel a particular planned action in a planned operation."""
input CancelPlanAction {
    """The destination address of the planned action to cancel."""
    destinationAddress: Address!
    """The sample id of the planned action to cancel."""
    sampleId: Int!
    """The new section number (if any) of the planned action to cancel."""
    newSection: Int
}

"""A specification of a particular piece of labware in a confirm request."""
input ConfirmOperationLabware {
    """The barcode of the labware."""
    barcode: String!
    """Should the whole labware be cancelled? Default false."""
    cancelled: Boolean
    """What individual planned actions should be cancelled, if any."""
    cancelledActions: [CancelPlanAction!]
    """What comments, if any, should be recorded against particular addresses."""
    addressComments: [AddressCommentInput!]
}

"""A request to confirm planned operations, created actual operations."""
input ConfirmOperationRequest {
    labware: [ConfirmOperationLabware!]!
}

"""A specification of a section to confirm in a planned sectioning operation."""
input ConfirmSection {
    """The address of the destination slot for the section."""
    destinationAddress: Address!
    """The original sample id of the source."""
    sampleId: Int!
    """The section number of the new section."""
    newSection: Int
}

"""A specification of a particular piece of labware to confirm or cancel planned sectioning into."""
input ConfirmSectionLabware {
    """The barcode of the labware."""
    barcode: String!
    """Should the whole labware be cancelled? Default false."""
    cancelled: Boolean
    """What individual sections, if any, should be created in the labware?"""
    confirmSections: [ConfirmSection!]
    """What comments, if any, should be recorded on slots of the labware?"""
    addressComments: [AddressCommentInput!]
}

"""A request to confirm (or cancel) planned sectioning operations."""
input ConfirmSectionRequest {
    """The specification of what to confirm or cancel in each labware."""
    labware: [ConfirmSectionLabware!]!
    """An optional work number to associate with the operations."""
    workNumber: String
}

"""A specification that the contents of one slot should be copied to a particular address in new labware."""
input SlotCopyContent {
    """The barcode of the source labware."""
    sourceBarcode: String!
    """The address of the source slot in its labware."""
    sourceAddress: Address!
    """The address of the destination slot."""
    destinationAddress: Address!
}

"""A destination for slot copy."""
input SlotCopyDestination {
    """The name of the type of the new destination labware."""
    labwareType: String!
    """The bio state for samples in the destination (if specified)."""
    bioState: String
    """The costing of the slide, if specified."""
    costing: SlideCosting
    """The lot number of the slide, if specified."""
    lotNumber: String
    """The probe lot number of the slide, if specified."""
    probeLotNumber: String
    """The barcode of the new labware, if it is prebarcoded."""
    preBarcode: String
    """The specifications of which source slots are being copied into what addresses in the destination labware."""
    contents: [SlotCopyContent!]!
}

"""A source for slot copy, if a new labware state is specified."""
input SlotCopySource {
    """The barcode of the source."""
    barcode: String!
    """The new labware state of the source."""
    labwareState: LabwareState!
}

"""A request to copy the contents of slots from source labware to multiple new or prebarcoded destinations."""
input SlotCopyRequest {
    """The destination labware and its contents."""
    destinations: [SlotCopyDestination!]!
    """The source labware and their new labware states (if specified)."""
    sources: [SlotCopySource!]!
    """The name of the type of operation being recorded to describe the contents being copied."""
    operationType: String!
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""A request to record an operation in place."""
input InPlaceOpRequest {
    """The name of the type of operation being recorded."""
    operationType: String!
    """The barcodes of the labware."""
    barcodes: [String!]!
    """The id of the equipment (if any) being used in this operation."""
    equipmentId: Int
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""A record of material being transferred from one slot to another as part of an operation."""
type Action {
    """The source slot, where the sample already was before the operation."""
    source: Slot!
    """The destination slot, where the sample is after the operation."""
    destination: Slot!
    """The id of the operation to which this action belongs."""
    operationId: Int!
    """The sample as it was created or copied in its destination slot."""
    sample: Sample!
}

"""A record of a particular operation being done involving labware and samples."""
type Operation {
    """The unique id of the operation."""
    id: Int!
    """The type of operation."""
    operationType: OperationType!
    """The specific samples and slots and how they were used in this operation."""
    actions: [Action!]!
    """The user responsible for this operation."""
    user: User!
    """The time at which this operation is regarded to have been performed (typically the time it was recorded)."""
    performed: Timestamp!
}

"""The result of confirming a plan."""
type ConfirmOperationResult {
    """The labware populated by the operations."""
    labware: [Labware!]!
    """The operations created."""
    operations: [Operation!]!
}

"""The result of creating a new plan."""
type PlanResult {
    """The labware created for the plan, which is empty until the plan is confirmed."""
    labware: [Labware!]!
    """The planned operations created."""
    operations: [PlanOperation!]!
}

"""A printer, typically used to print labels for labware."""
type Printer {
    name: String!
    """The types of labels this printer is set up to print."""
    labelTypes: [LabelType!]!
}

"""A preset comment that users may select to link to parts of operations they record."""
type Comment {
    """The unique id of this comment."""
    id: Int!
    """The text content of the comment: What comment is it?"""
    text: String!
    """The category of the comment: Where is it applicable?"""
    category: String!
    enabled: Boolean!
}

"""A piece of equipment that may be associated with certain operations."""
type Equipment {
    """The unique id of this equipment."""
    id: Int!
    name: String!
    """The category of equipment: What kind of thing is it or what is it used for?"""
    category: String!
    enabled: Boolean!
}

"""A description of a place to which labware may be released."""
type ReleaseDestination {
    name: String!
    enabled: Boolean!
}

"""A username for someone responsible for receiving released labware."""
type ReleaseRecipient {
    username: String!
    enabled: Boolean!
}

"""A record that labware was sent out or given away."""
type Release {
    """The unique id of this release."""
    id: Int!
    """The labware that was released."""
    labware: Labware!
    """Where the labware was sent."""
    destination: ReleaseDestination!
    """Who is responsible for receiving the labware."""
    recipient: ReleaseRecipient!
}

"""The result of a release request."""
type ReleaseResult {
    """The releases recorded for this request."""
    releases: [Release!]!
}

"""A request to record releases for one or more labware."""
input ReleaseRequest {
    """The barcodes of the labware being released."""
    barcodes: [String!]!
    """The name of the release destination."""
    destination: String!
    """The name of the release recipient."""
    recipient: String!
}

"""A request to record an extract operation."""
input ExtractRequest {
    """The barcodes of the source labware."""
    barcodes: [String!]!
    """The name of the labware type for the new destination labware."""
    labwareType: String!
    """An optional work number to associate with these operations."""
    workNumber: String
}

"""The result of a request to record operations."""
type OperationResult {
    """The destination labware for the operations."""
    labware: [Labware!]!
    """The new operations recorded."""
    operations: [Operation!]!
}

"""A preset reason that labware may be destroyed."""
type DestructionReason {
    """The unique id of this destruction reason."""
    id: Int!
    """The text of this reason: What reason is it?"""
    text: String!
    enabled: Boolean!
}

"""A record that some piece of labware was destroyed for some particular reason."""
type Destruction {
    """The labware destroyed."""
    labware: Labware
    """The user responsible for the destruction."""
    user: User
    """The time the destruction was carried out (or at least when it was recorded)."""
    destroyed: Timestamp
    """The reason for the destruction."""
    reason: DestructionReason
}

"""The result of a request to destroy labware."""
type DestroyResult {
    """The destructions created for this request."""
    destructions: [Destruction!]!
}

"""A request to destroy some labware for a particular reason."""
input DestroyRequest {
    """The barcodes of the labware to destroy."""
    barcodes: [String!]!
    """The id of a destruction reason."""
    reasonId: Int!
}

"""An item in storage."""
type StoredItem {
    """The barcode of the item."""
    barcode: String!
    """The location of the item."""
    location: Location!
    """The row/column address (if any) of the item in its location."""
    address: Address
}

"""An item no longer in storage."""
type UnstoredItem {
    """The barcode of the item."""
    barcode: String!
    """The row/column address (if any) where the item was stored."""
    address: Address
}

"""The size of a 2D grid."""
type Size {
    """The number of rows in this layout."""
    numRows: Int!
    """The number of columns in this layout."""
    numColumns: Int!
}

"""A traversal order for a grid."""
enum GridDirection {
    """Right across the top row, then down to the next row, etc."""
    RightDown
    """Down the leftmost column, then right to the next column, etc."""
    DownRight
    """Right across the bottom row, then up to the next row, etc."""
    RightUp
    """Up the leftmost column, then right to the next column, etc."""
    UpRight
}

"""A location where items may be stored."""
type Location {
    """The unique id of this location."""
    id: Int!
    """The unique barcode of this location."""
    barcode: String!
    """The fixed name (if any) of this location, not changeable through this API."""
    fixedName: String
    """The custom name (if any) of this location, that may be changed through this API."""
    customName: String
    """The row/column address (if any) of this location in its parent location."""
    address: Address
    """The size of the grid (if any) where items may be stored in this location."""
    size: Size
    """Some information about the location (if any) containing this location."""
    parent: LinkedLocation
    """The items stored in this location."""
    stored: [StoredItem!]!
    """The other locations inside this location."""
    children: [LinkedLocation!]!
    """The suggested order (if any) of addresses in this location where items should be stored."""
    direction: GridDirection
    """A combination of this location's name and its parents' names and barcodes."""
    qualifiedNameWithFirstBarcode: String
}

"""Information about a storage location, without links to other locations and items."""
type LinkedLocation {
    """The barcode of this location."""
    barcode: String!
    """The fixed name of this location, not changeable through this API."""
    fixedName: String
    """The custom name (if any) of this location, that may be changed through this API."""
    customName: String
    """The row/column address (if any) of this location in its parent location."""
    address: Address
}

"""The result of a request to empty a location."""
type UnstoreResult {
    """The number of items unstored."""
    numUnstored: Int!
    """The details of the item unstored."""
    unstored: [UnstoredItem!]!
}

"""Information that a particular sample was found in a particular labware."""
type FindEntry {
    """The id of the sample found."""
    sampleId: Int!
    """The id of the labware where the sample was found."""
    labwareId: Int!
    """The list of work numbers associated with the entry."""
    workNumbers: [String]!
}

"""Information that a particular labware was found in a particular location."""
type LabwareLocationEntry {
    """The id of the labware found."""
    labwareId: Int!
    """The id of the location where the labware was found."""
    locationId: Int!
    """The row/column address (if any) of the labware inside the location."""
    address: Address
}

"""The result of a find request: labware, its locations, and its contents."""
type FindResult {
    """Links between samples and labware."""
    entries: [FindEntry!]!
    """Information about each sample found."""
    samples: [Sample!]!
    """Information about each labware found."""
    labware: [Labware!]!
    """Information about each location labware was found in."""
    locations: [Location!]!
    """Links between labware and locations."""
    labwareLocations: [LabwareLocationEntry!]!
    """The number of records found, which may be greater than the number of records returned."""
    numRecords: Int!
}

"""A request to find some stored labware. Some, any or all fields may be filled. Each one refines the search results."""
input FindRequest {
    """The barcode of a specific piece of labware to find."""
    labwareBarcode: String
    """The name of a donor to find stored samples of."""
    donorName: String
    """The name of a tissue to find stored samples of."""
    tissueExternalName: String
    """The name of a tissue type to find stored samples of."""
    tissueTypeName: String
    """The maximum number of records to return. Use a negative value to indicate no limit."""
    maxRecords: Int
    """The work number associated with the labware."""
    workNumber: String
    """The minimum creation date for the labware."""
    createdMin: Date
    """The maximum creation date for the labware."""
    createdMax: Date
}

"""An entry in the history: the IDs refer to objects that should also be included in the History."""
type HistoryEntry {
    """The id of the operation or other event to which this entry refers."""
    eventId: Int!
    """The operation type of type of event to which this entry refers."""
    type: String!
    """The time the event took place (or was recorded)."""
    time: Timestamp!
    """The id of the source labware of this event."""
    sourceLabwareId: Int!
    """The id of the destination labware of this event."""
    destinationLabwareId: Int!
    """The id of the sample involved in this event."""
    sampleId: Int
    """The username of the user responsible for this event."""
    username: String!
    """The work number (if any) associated with this event."""
    workNumber: String
    """Extra details (such as measurements and comments) included in this entry."""
    details: [String!]!
}

"""History as returned for a history query."""
type History {
    """The entries found for the history."""
    entries: [HistoryEntry!]!
    """The labware referenced by the entries."""
    labware: [Labware!]!
    """The samples references by the entries."""
    samples: [Sample!]!
}

"""Information about a plan previously recorded, now being looked up."""
type PlanData {
    """One or more items of source labware for the plan."""
    sources: [Labware!]!
    """The planned operation."""
    plan: PlanOperation!
    """The single item of destination labware for the plan."""
    destination: Labware!
}

"""A project that work can be associated with."""
type Project {
    name: String!
    enabled: Boolean!
}

"""A program that work can be associated with."""
type Program {
    name: String!
    enabled: Boolean!
}

"""A cost code that work can be associated with."""
type CostCode {
    code: String!
    enabled: Boolean!
}

"""A type of work, describing what kind of work it is (its purpose or activity)."""
type WorkType {
    name: String!
    enabled: Boolean!
}

"""The possible statuses of work."""
enum WorkStatus {
    """This is the initial status of new work."""
    unstarted
    """The work has been started, or resumed following a pause.
    Work must be in this status for operations to be recorded in it."""
    active
    """The work has been paused (for some particular reason) by a user."""
    paused
    """The work has been completed successfully. This is a final status."""
    completed
    """The work has failed (for some particular reason). This is a final status."""
    failed
    """The work has been withdrawn (for some particular reason). This is a final status."""
    withdrawn
}

"""Work that can be used to collect together operations done on related samples for a particular purpose."""
type Work {
    """The type of work: what does it entail?"""
    workType: WorkType!
    """The project for which this work is done."""
    project: Project!
    """The program associated with this work."""
    program: Program!
    """The cost code responsible for paying for this work."""
    costCode: CostCode!
    """The unique (generated) string identifying this work."""
    workNumber: String!
    """The name of the person requesting the work.(Note sure how to deal with this as the existing work will all be null but future work we want it mandatory?)"""
    workRequester: ReleaseRecipient
    """The current status of the work."""
    status: WorkStatus!
    """The number of blocks that this work still needs to be done on.
    This is set and updated by users during the course of the work."""
    numBlocks: Int
    """The number of slides that this work still needs to be done on.
    This is set and updated by users during the course of the work."""
    numSlides: Int
    """The number of original samples that this work still needs to be done on.
    This is set and updated by users during the course of the work."""
    numOriginalSamples: Int
    """A string describing the priority of this work.
    This is set and updated by users during the course of the work."""
    priority: String
    """The omero project associated with this work, if any."""
    omeroProject: OmeroProject
}

"""A work along with a comment that was recorded to explain its current status."""
type WorkWithComment {
    """The work."""
    work: Work!
    """The text of the comment (if any) that was recorded when the work last changed its status."""
    comment: String
}

"""An indication that something happened at some particular time."""
type WorkProgressTimestamp {
    """The name of the thing that happened."""
    type: String!
    """The timestamp when the thing happened."""
    timestamp: Timestamp!
}

"""The things that have happened for a particular work, as requested by a user."""
type WorkProgress {
    """The work under consideration."""
    work: Work!
    """The comment associated with the work status."""
    workComment: String
    """The things that happened for that work, and when they happened."""
    timestamps: [WorkProgressTimestamp!]!
    """The most recent operation for a given piece of work"""
    mostRecentOperation: String
}

"""A measurement given as a number of seconds for some particular named measure."""
input TimeMeasurement {
    name: String!
    seconds: Int!
}

"""A type of stain that may be performed."""
type StainType {
    name: String!
    """The types of measurements we may expect to be recorded as part of a stain of this type."""
    measurementTypes: [String!]!
}

"""A request to record stains on some labware."""
input StainRequest {
    """The name of a stain type to record."""
    stainType: String!
    """The barcodes of the labware being stained."""
    barcodes: [String!]!
    """The times of particular measurements for the stains."""
    timeMeasurements: [TimeMeasurement!]!
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""The panel used with a stain."""
enum StainPanel {
    positive
    negative
    marker
}

"""The details for a particular labware in a complex stain request."""
input ComplexStainLabware {
    """The barcode of the labware."""
    barcode: String!
    """The bond barcode for the stain."""
    bondBarcode: String!
    """The bond run number."""
    bondRun: Int!
    """An optional work number to associate with this operation."""
    workNumber: String
    """The plex for RNAscope if that is being recorded."""
    plexRNAscope: Int
    """The plex for IHC if that is being recorded."""
    plexIHC: Int
    """The experiment panel."""
    panel: StainPanel!
}

"""A request for a stain including bond barcodes and such."""
input ComplexStainRequest {
    """The names of the types of stain being recorded."""
    stainTypes: [String!]!
    """The details of the labware being stained."""
    labware: [ComplexStainLabware!]!
}

"""The details of a previously released item of labware to receive back into the application."""
input UnreleaseLabware {
    """The barcode of the labware."""
    barcode: String!
    """The highest section number taken from the block, if it is a block."""
    highestSection: Int
    """The work number associated with the unrelease of this labware."""
    workNumber: String!
}

"""A request to receive back some previously released labware."""
input UnreleaseRequest {
    labware: [UnreleaseLabware!]!
}

"""Specification of a result being recording."""
input SampleResult {
    """The slot address that the result refers to."""
    address: Address!
    """The result."""
    result: PassFail!
    """The id of a comment, if any, linked to the result."""
    commentId: Int
}

"""Specification of results being recorded in an item of labware."""
input LabwareResult {
    """The barcode of the labware."""
    barcode: String!
    """The individual results."""
    sampleResults: [SampleResult!]!
    """Measurements to record in this labware."""
    slotMeasurements: [SlotMeasurementRequest!]
    """An optional costing for the labware."""
    costing: SlideCosting
    """A reagent lot number to associate with the labware."""
    reagentLot: String
}

"""A request to record results."""
input ResultRequest {
    """The name of the operation that will record the results."""
    operationType: String
    """The results for each item of labware."""
    labwareResults: [LabwareResult!]!
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""Specification of extract results in a piece of labware."""
input ExtractResultLabware {
    """The barcode of the labware."""
    barcode: String!
    """The result."""
    result: PassFail!
    """The concentration measurement, if any."""
    concentration: String
    """The id of a comment, if any, linked to the result."""
    commentId: Int
}

"""A request to record extract results."""
input ExtractResultRequest {
    """The details of the results in each item of labware."""
    labware: [ExtractResultLabware!]!
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""The permeabilisation data for a particular slot address."""
input PermData {
    """The address of a slot in its labware."""
    address: Address!
    """The number of seconds, if specified."""
    seconds: Int
    """The control type, if this is a control."""
    controlType: ControlType
    """The barcode of the labware being put into this slot as a control, if there is one."""
    controlBarcode: String
}

"""A request to record permeabilisation data."""
input RecordPermRequest {
    """The barcode of the labware."""
    barcode: String!
    """An optional work number to associate with this operation."""
    workNumber: String
    """The data for each slot in the labware."""
    permData: [PermData!]!
}

"""Permeabilisation data about a particular slot address."""
type AddressPermData {
    """The slot address."""
    address: Address!
    """The number of seconds, if any."""
    seconds: Int
    """The control type, if this is a control."""
    controlType: ControlType
    """Whether this result has been selected."""
    selected: Boolean!
}

"""The permeabilisation data recorded for a particular piece of labware."""
type VisiumPermData {
    """The labware in question."""
    labware: Labware!
    """The permeabilisation data for each slot."""
    addressPermData: [AddressPermData!]!
}

"""Request to record visium analysis, selecting a permeabilisation time."""
input VisiumAnalysisRequest {
    """The barcode of the labware."""
    barcode: String!
    """An optional work number to associate with this operation."""
    workNumber: String
    """The address where the selected permeabilisation was recorded."""
    selectedAddress: Address!
    """The permeabilisation time that we want to select."""
    selectedTime: Int!
}

"""A pass/fail result in a particular slot of some labware."""
type SlotPassFail {
    """The address of the slot in its labware."""
    address: Address!
    """The result."""
    result: PassFail!
    """The comment, if any, recorded with the result."""
    comment: String
}

"""An operation and the pass/fails in the slots of its labware."""
type OpPassFail {
    """An operation with one destination labware."""
    operation: Operation!
    """The pass fails in each address of the destination labware."""
    slotPassFails: [SlotPassFail!]!
}

"""A piece of labware and an extract result, if any exists."""
type ExtractResult {
    """The labware the result refers to."""
    labware: Labware!
    """The result, if any."""
    result: PassFail
    """The concentration recorded, if any."""
    concentration: String
}

"""A specification for recording a measurement."""
input StringMeasurement {
    """The thing being measured."""
    name: String!
    """The value of the measurement."""
    value: String!
}

"""An item of labware that RNA Analysis is being requested on."""
input RNAAnalysisLabware {
    """The barcode of the labware."""
    barcode: String!
    """An optional work number to associate with this operation."""
    workNumber: String
    """The id of a preset comment, if any, to associate with the analysis."""
    commentId: Int
    """The measurements to record for this operation."""
    measurements: [StringMeasurement!]!
}

"""A request to record an RNA analysis operation."""
input RNAAnalysisRequest {
    """The name of the type of operation (a type RNA analsis)."""
    operationType: String!
    """The details of what to record on one or more labware."""
    labware: [RNAAnalysisLabware!]!
}

"""A measurement to be recorded in a particular slot of some item of labware."""
input SlotMeasurementRequest {
    """The address of the slot."""
    address: Address!
    """The name of the measurement."""
    name: String!
    """The value of the measurement."""
    value: String!
    """An optional comment id."""
    commentId: Int
}

"""A request to record an operation in place with measurements in slots."""
input OpWithSlotMeasurementsRequest {
    """The barcode of the labware."""
    barcode: String!
    """The name of the type of operation to record."""
    operationType: String!
    """An optional work number to associate with this operation."""
    workNumber: String
    """The measurements to record in individual slots."""
    slotMeasurements: [SlotMeasurementRequest!]!
}

"""A specification of an item to be put into storage."""
input StoreInput {
    """The barcode of the item to be stored."""
    barcode: String!
    """The address, if any, in a location where the item should be stored."""
    address: Address
}

"""A request to transfer material from one source labware into multiple new destination labware (first slot)."""
input AliquotRequest {
    """The name of the operation to record."""
    operationType: String!
    """The barcode of the source labware."""
    barcode: String!
    """The name of the labware type for the destination labware."""
    labwareType: String!
    """The number of destination labware to create."""
    numLabware: Int!
    """An optional work number to associate with this operation."""
    workNumber: String
}

"""A slot in a reagent plate."""
type ReagentSlot {
    address: Address!
    used: Boolean!
}

"""A plate of reagents."""
type ReagentPlate {
    barcode: String!
    slots: [ReagentSlot!]!
    plateType: String
}

"""
The data about original tissues and their next replicate numbers.
"""
type NextReplicateData {
    """The source barcodes for the new replicates."""
    barcodes: [String!]!
    """The id of the donor."""
    donorId: Int!
    """The id of the spatial location."""
    spatialLocationId: Int!
    """The next replicate number for this group."""
    nextReplicateNumber: Int!
}

"""A group in a work summary."""
type WorkSummaryGroup {
    """The work type of this group."""
    workType: WorkType!
    """The work status of this group."""
    status: WorkStatus!
    """The number of works in this group."""
    numWorks: Int!
    """The total number of blocks required as specified in these works."""
    totalNumBlocks: Int!
    """The total number of slides required as specified in these works."""
    totalNumSlides: Int!
    """The total number of original samples required as specified in these works."""
    totalNumOriginalSamples: Int!
}

"""All data needed for a Work Summary."""
type WorkSummaryData {
    workSummaryGroups: [WorkSummaryGroup!]!
    workTypes: [WorkType!]!
}

"""A file uploaded to Stan."""
type StanFile {
    """When this stanfile was uploaded."""
    created: Timestamp!
    """The work with which this file is associated."""
    work: Work!
    """The user who uploaded the file."""
    user: User!
    """The name of the file."""
    name: String!
    """The url to download the file."""
    url: String!
}

"""A specification that a particular reagent slot should be transferred to an address."""
input ReagentTransfer {
    """The barcode of a reagent plate."""
    reagentPlateBarcode: String!
    """The address of a slot in the reagent plate."""
    reagentSlotAddress: Address!
    """The address if a slot in the destination labware."""
    destinationAddress: Address!
}

"""A request to transfer reagents from reagent plates to a STAN labware."""
input ReagentTransferRequest {
    """The name of the operation being performed."""
    operationType: String!
    """The work number to associate with the operation."""
    workNumber: String
    """The barcode of the destination labware."""
    destinationBarcode: String!
    """The transfers from aliquot slots to destination slots."""
    transfers: [ReagentTransfer!]!
    """The type of reagent plate involved."""
    plateType: String!
}

"""A request to process original tissue into blocks."""
input TissueBlockRequest {
    """The work number associated with this request."""
    workNumber: String
    """The labware (blocks) being created by this request."""
    labware: [TissueBlockLabware!]!
    """Which source barcodes (if any) to discard as part of this request."""
    discardSourceBarcodes: [String!]
}

"""The input about a new block being created."""
input TissueBlockLabware {
    """The original tissue barcode."""
    sourceBarcode: String!
    """The labware type for the new labware."""
    labwareType: String!
    """The barcode of the new labware, if it is prebarcoded."""
    preBarcode: String
    """The comment (if any) associated with this operation."""
    commentId: Int
    """The replicate number for the new block."""
    replicate: String!
    """The medium for the new block."""
    medium: String!
}

"""A request to transfer original sample into pots."""
input PotProcessingRequest {
    """The source barcode."""
    sourceBarcode: String!
    """The work number."""
    workNumber: String!
    """The destinations that will be created."""
    destinations: [PotProcessingDestination!]!
    """Is the source labware discarded?"""
    sourceDiscarded: Boolean
}

"""A destination for pot processing."""
input PotProcessingDestination {
    """The name of the type of labware."""
    labwareType: String!
    """The fixative."""
    fixative: String!
    """Comment to record, if any."""
    commentId: Int
}

"""A labware barcode and a comment id to add."""
input SampleProcessingComment  {
    """The barcode of the labware."""
    barcode: String!
    """The id of the comment."""
    commentId: Int!
}

"""Request to record operations and add comments to labware."""
input SampleProcessingCommentRequest  {
    """The comments to add for each labware."""
    labware: [SampleProcessingComment!]!
}

input AddExternalIDRequest {
    """The external identifier used to identify the tissue."""
    externalName: String!
    """The existing labware containing the tissue"""
    labwareBarcode: String!
}

"""A request to perform solution transfer."""
input SolutionTransferRequest {
    """The work number for the operations."""
    workNumber: String!
    """The details of the labware in the request."""
    labware: [SolutionTransferLabware!]!
}

"""A labware in a solution transfer request."""
input SolutionTransferLabware {
    """The barcode of the labware."""
    barcode: String!
    """The name solution."""
    solution: String!
}

"""A request to record FFPE processing."""
input FFPEProcessingRequest {
    """The work number."""
    workNumber: String!
    """The labware barcodes."""
    barcodes: [String!]!
    """The comment ID."""
    commentId: Int!
}

"""Request to record an operation on multiple labware in-place with comments on some slots."""
input OpWithSlotCommentsRequest {
    """The name of the operation type to record."""
    operationType: String!
    """The work number."""
    workNumber: String
    """The details of the labware."""
    labware: [LabwareWithSlotCommentsRequest!]!
}

"""Specification of comments in slots of a piece of labware."""
input LabwareWithSlotCommentsRequest {
    """The barcode of the labware."""
    barcode: String!
    """The comments in slots of this labware."""
    addressComments: [AddressCommentInput!]!
}

"""
Get information from the application.
These typically require no user privilege.
"""
type Query {
    """Get the current logged in user."""
    user: User
    """Get all the tissue types available."""
    tissueTypes: [TissueType!]!
    """Get all the labware types available."""
    labwareTypes: [LabwareType!]!
    """Get all the HMDMCs that are enabled, or get all including those that are disabled."""
    hmdmcs(includeDisabled: Boolean): [Hmdmc!]!
    """Get all the mediums available."""
    mediums: [Medium!]!
    """Get all the fixatives that are enabled, or get all including those that are disabled."""
    fixatives(includeDisabled: Boolean): [Fixative!]!
    """Get all the species that are enabled, or get all including those that are disabled."""
    species(includeDisabled: Boolean): [Species!]!
    """Get the labware with the given barcode."""
    labware(barcode: String!): Labware!
    """Get all printers available, or get all printers that support a named label type."""
    printers(labelType: String): [Printer!]!
    """Get all enabled comments in a particular category, or all enabled in any category; optionally include disabled."""
    comments(category: String, includeDisabled: Boolean): [Comment!]!
    """Get all enabled equipments in a particular category, or all enabled in any category; optionally include disabled."""
    equipments(category: String, includeDisabled: Boolean): [Equipment!]!
    """Get all the release destinations that are enabled, or get all including those that are disabled."""
    releaseDestinations(includeDisabled: Boolean): [ReleaseDestination!]!
    """Get all the release recipients that are enabled, or get all including those that are disabled."""
    releaseRecipients(includeDisabled: Boolean): [ReleaseRecipient!]!
    """Get all the destruction reasons that are enabled, or get all including those that are disabled."""
    destructionReasons(includeDisabled: Boolean): [DestructionReason!]!
    """Get all the projects that are enabled, or get all including those that are disabled."""
    projects(includeDisabled: Boolean): [Project!]!
    """Get all programs that are enabled, or get all including those that are disabled."""
    programs(includeDisabled: Boolean): [Program!]!
    """Get all the cost codes that are enabled, or get all including those that are disabled."""
    costCodes(includeDisabled: Boolean): [CostCode!]!
    """Get all the solutions that are enabled, or get all including those that are disabled."""
    solutions(includeDisabled: Boolean): [Solution!]!
    """Get all the omero projects that are enabled, or including those that are disabled."""
    omeroProjects(includeDisabled: Boolean): [OmeroProject!]!
    """Get all the work types that are enabled, or get all including those that are disabled."""
    workTypes(includeDisabled: Boolean): [WorkType!]!
    """Get all the works, or get all the works in the given specified statuses."""
    works(status: [WorkStatus!]): [Work!]!
    """Get the work with the specified work number."""
    work(workNumber: String!): Work!
    """Get all the works with associated comment, or get all the ones in the given statuses."""
    worksWithComments(status: [WorkStatus!]): [WorkWithComment!]!
    """Get summary of works."""
    worksSummary: WorkSummaryData!
    """Get all the users that are enabled, or get all including those that are disabled."""
    users(includeDisabled: Boolean): [User!]!
    """Find where labware is stored, given some criteria."""
    find(request: FindRequest!): FindResult!
    """Get the information about a planned operation previously recorded for a specific labware barcode."""
    planData(barcode: String!): PlanData!
    """Get the available stain types."""
    stainTypes: [StainType!]!
    """Get an item of labware and the visium permeabilisation data recorded on it, if any."""
    visiumPermData(barcode: String!): VisiumPermData!
    """Get a previously recorded extract result for a given labware barcode."""
    extractResult(barcode: String!): ExtractResult!
    """Get an operation and the pass/fail result recorded on it, for a given labware barcode and operation type name."""
    passFails(barcode: String!, operationType: String!): [OpPassFail!]!
    """List files linked to a work number."""
    listFiles(workNumber: String!): [StanFile!]!
    """Get the existing costing (if any) for an item of labware."""
    labwareCosting(barcode: String!): SlideCosting

    """Get the history containing a given sample id."""
    historyForSampleId(sampleId: Int!): History!
    """Get the history containing a tissue with the given external name."""
    historyForExternalName(externalName: String!): History!
    """Get the history for a specified donor."""
    historyForDonorName(donorName: String!): History!
    """Get the operation history for a specified work number."""
    historyForWorkNumber(workNumber: String!): History!
    """Get the history containing a given labware barcode."""
    historyForLabwareBarcode(barcode: String!): History!
    """Get the work progress (some particular timestamps) associated with a specified work number, and/or
    work types, programs, statuses."""
    workProgress(workNumber: String, workTypes: [String!], programs:[String!], statuses: [WorkStatus!]): [WorkProgress!]!
    """Gets a reagent plate, if it exists. May return null."""
    reagentPlate(barcode: String!): ReagentPlate
    """Gets the next replicate data for the given source labware barcodes."""
    nextReplicateNumbers(barcodes: [String!]!): [NextReplicateData!]!
    """Get operations into a given labware barcode of a given operation type."""
    labwareOperations(barcode: String!, operationType: String!): [Operation]

    """Get the specified storage location."""
    location(locationBarcode: String!): Location!
    """Get the information about stored items with the given barcodes."""
    stored(barcodes: [String!]!): [StoredItem!]!
    """Get the labware contained in a particular location."""
    labwareInLocation(locationBarcode: String!): [Labware!]!
}

"""
Send information to the application.
These typically require a user with the suitable permission for the particular request.
"""
type Mutation {
    """Log in with the given credentials."""
    login(username: String!, password: String!): LoginResult!
    """Log out; end the current login session."""
    logout: String
    """Register blocks of tissue."""
    register(request: RegisterRequest!): RegisterResult!
    """Register sections of tissue."""
    registerSections(request: SectionRegisterRequest): RegisterResult!
    """Record planned operations."""
    plan(request: PlanRequest!): PlanResult!
    """Print the specified labware barcodes on the specified printer."""
    printLabware(printer: String!, barcodes: [String!]!): String
    """Confirm operations previously planned."""
    confirmOperation(request: ConfirmOperationRequest!): ConfirmOperationResult!
    """Confirm sections previously planned."""
    confirmSection(request: ConfirmSectionRequest!): OperationResult!
    """Release some labware."""
    release(request: ReleaseRequest!): ReleaseResult!
    """Record extract operations."""
    extract(request: ExtractRequest!): OperationResult!
    """Destroy some labware."""
    destroy(request: DestroyRequest!): DestroyResult!
    """Record an operation copying slots from multiple source labware into various slots of one destination labware."""
    slotCopy(request: SlotCopyRequest!): OperationResult!
    """Create a new comment that users can select to link to future operations."""
    addComment(category: String!, text: String!): Comment!
    """Enable or disable a preset comment."""
    setCommentEnabled(commentId: Int!, enabled: Boolean!): Comment!
    """Create a new piece of equipment that users can record using in future operations."""
    addEquipment(category: String!, name: String!): Equipment!
    """Enable or disable a piece of equipment."""
    setEquipmentEnabled(equipmentId: Int!, enabled: Boolean!): Equipment!
    """Create a new reason that users can record when destroying labware."""
    addDestructionReason(text: String!): DestructionReason!
    """Enable or disable a destruction reason."""
    setDestructionReasonEnabled(text: String!, enabled: Boolean!): DestructionReason!
    """Create a new HMDMC that can be used when registering new tissue."""
    addHmdmc(hmdmc: String!): Hmdmc!
    """Enable or disable an HMDMC."""
    setHmdmcEnabled(hmdmc: String!, enabled: Boolean!): Hmdmc!
    """Create a new release destination that can be associated with labware releases."""
    addReleaseDestination(name: String!): ReleaseDestination!
    """Enable or disable a release destination."""
    setReleaseDestinationEnabled(name: String!, enabled: Boolean!): ReleaseDestination!
    """Create a new release recipient that can be associated with labware releases."""
    addReleaseRecipient(username: String!): ReleaseRecipient!
    """Enable or disable a release recipient."""
    setReleaseRecipientEnabled(username: String!, enabled: Boolean!): ReleaseRecipient!
    """Create a new species that can be associated with donors in tissue registration."""
    addSpecies(name: String!): Species!
    """Enable or disable a species."""
    setSpeciesEnabled(name: String!, enabled: Boolean!): Species!
    """Create a new project that can be associated with work."""
    addProject(name: String!): Project!
    """Enable or disable a project."""
    setProjectEnabled(name: String!, enabled: Boolean!): Project!
    """Create a new program that can be associated with work."""
    addProgram(name: String!): Program!
    """Enable or disable a program."""
    setProgramEnabled(name: String!, enabled: Boolean!): Program!
    """Create a new cost code that can be associated with work."""
    addCostCode(code: String!): CostCode!
    """Enable or disable a cost code."""
    setCostCodeEnabled(code: String!, enabled: Boolean!): CostCode!
    """Create a new fixative that can be selected when registering tissue."""
    addFixative(name: String!): Fixative!
    """Enable or disable a fixative."""
    setFixativeEnabled(name: String!, enabled: Boolean!): Fixative!
    """Create a new work type."""
    addWorkType(name: String!): WorkType!
    """Enable or disable a work type."""
    setWorkTypeEnabled(name: String!, enabled: Boolean!): WorkType!
    """Add a new solution."""
    addSolution(name: String!): Solution!
    """Enable or disable a solution."""
    setSolutionEnabled(name: String!, enabled: Boolean!): Solution!
    """Add a new omero project."""
    addOmeroProject(name: String!): OmeroProject!
    """Enable or disable an omero project."""
    setOmeroProjectEnabled(name: String!, enabled: Boolean!): OmeroProject!

    """Create a new work, which will be allocated a new work number with the given prefix."""
    createWork(prefix: String!, workType: String!, workRequester: String!, project: String!, program: String!, costCode: String!, numBlocks: Int, numSlides: Int, numOriginalSamples: Int, omeroProject: String): Work!
    """Update the status of an existing work."""
    updateWorkStatus(workNumber: String!, status: WorkStatus!, commentId: Int): WorkWithComment!
    """Update the number of blocks field in a work."""
    updateWorkNumBlocks(workNumber: String!, numBlocks: Int): Work!
    """Update the number of slides field in a work."""
    updateWorkNumSlides(workNumber: String!, numSlides: Int): Work!
    """Update the number of original samples field in a work."""
    updateWorkNumOriginalSamples(workNumber: String!, numOriginalSamples: Int): Work!
    """Update the priority of a work."""
    updateWorkPriority(workNumber: String!, priority: String): Work!
    """Update the omero project of a work."""
    updateWorkOmeroProject(workNumber: String!, omeroProject: String): Work!

    """Record a new stain with time measurements."""
    stain(request: StainRequest!): OperationResult!
    """Record an operation in place."""
    recordInPlace(request: InPlaceOpRequest!): OperationResult!
    """Unrelease some previously released labware."""
    unrelease(request: UnreleaseRequest!): OperationResult!
    """Record the result of a stain."""
    recordStainResult(request: ResultRequest!): OperationResult!
    """Record the result of an extract."""
    recordExtractResult(request: ExtractResultRequest!): OperationResult!
    """Record permeabilisation."""
    recordPerm(request: RecordPermRequest!): OperationResult!
    """Record Visium Analysis."""
    visiumAnalysis(request: VisiumAnalysisRequest!): OperationResult!
    """Record RNA Analysis."""
    recordRNAAnalysis(request: RNAAnalysisRequest!): OperationResult!
    """Record Visium QC."""
    recordVisiumQC(request: ResultRequest!): OperationResult!
    """Record an operation with measurements in slots."""
    recordOpWithSlotMeasurements(request: OpWithSlotMeasurementsRequest!): OperationResult!
    """Record a stain operation with plex and bond information."""
    recordComplexStain(request: ComplexStainRequest!): OperationResult!
    """Transfer samples from one labware into multiple labware."""
    aliquot(request: AliquotRequest!): OperationResult!
    """Record an operation transferring reagents from a reagent plate to an item of Stan labware."""
    reagentTransfer(request: ReagentTransferRequest!): OperationResult!
    """Register original samples."""
    registerOriginalSamples(request: OriginalSampleRegisterRequest!): RegisterResult!
    """Process tissue into blocks."""
    performTissueBlock(request: TissueBlockRequest!): OperationResult!
    """Process an original sample into pots."""
    performPotProcessing(request: PotProcessingRequest!): OperationResult!
    """Record ops to add sample processing comments."""
    recordSampleProcessingComments(request: SampleProcessingCommentRequest!): OperationResult!
    """Add solutions to labware."""
    performSolutionTransfer(request: SolutionTransferRequest!): OperationResult!
    """Perform FFPE processing."""
    performFFPEProcessing(request: FFPEProcessingRequest!): OperationResult!
    """Record an operation adding a external ID to a sample."""
    addExternalID(request: AddExternalIDRequest!): OperationResult!
    """Record an operation in-place with comments on slots."""
    recordOpWithSlotComments(request: OpWithSlotCommentsRequest): OperationResult!

    """Create a new user for the application."""
    addUser(username: String!): User!
    """Set the user role (privileges) for a user."""
    setUserRole(username: String!, role: UserRole!): User!

    """Store an item in a particular location, optionally with an address."""
    storeBarcode(barcode: String!, locationBarcode: String!, address: Address): StoredItem!
    """Store multiple items in a particular location, with optional addresses."""
    store(store: [StoreInput!]!, locationBarcode: String!): Location!
    """Remove a specified item from storage."""
    unstoreBarcode(barcode: String!): UnstoredItem
    """Empty a specified location of its stored items."""
    empty(locationBarcode: String!): UnstoreResult!
    """Set the custom name of a specified location."""
    setLocationCustomName(locationBarcode: String!, customName: String): Location!
}
