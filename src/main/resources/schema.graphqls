scalar Address
scalar Timestamp

type User {
    username: String!,
}

type LoginResult {
    message: String,
    user: User,
}

type Medium {
    name: String!,
}

type Fixative {
    name: String!,
}

type MouldSize {
    name: String!,
}

type TissueType {
    name: String!,
    spatialLocations: [SpatialLocation!]!,
}

type SpatialLocation {
    name: String!,
    code: Int!,
    tissueType: TissueType!,
}

type Hmdmc {
    hmdmc: String!,
}

type LabelType {
    name: String!,
}

type LabwareType {
    name: String!,
    numRows: Int!,
    numColumns: Int!,
    labelType: LabelType,
}

type Donor {
    donorName: String!,
    lifeStage: LifeStage!,
}

type Tissue {
    externalName: String!,
    replicate: Int!,
    spatialLocation: SpatialLocation!,
    donor: Donor!,
    hmdmc: Hmdmc!,
    mouldSize: MouldSize!,
    medium: Medium!,
    fixative: Fixative!,
}

type Sample {
    id: Int!,
    section: Int,
    tissue: Tissue!,
}

type Slot {
    address: Address!,
    labwareId: Int!,
    samples: [Sample!]!,
    block: Boolean!,
    highestSection: Int,
}

type Labware {
    id: Int!,
    barcode: String!,
    labwareType: LabwareType!,
    slots: [Slot!]!,
}

enum LifeStage {
    adult
    paediatric
    fetal
}

input BlockRegisterRequest {
    donorIdentifier: String!,
    lifeStage: LifeStage!,
    hmdmc: String!,
    tissueType: String!,
    spatialLocation: Int!,
    replicateNumber: Int!,
    externalIdentifier: String!,
    highestSection: Int!,
    labwareType: String!,
    medium: String!,
    fixative: String!,
    mouldSize: String!,
}

input RegisterRequest {
    blocks: [BlockRegisterRequest!]!,
}

type RegisterResult {
    labware: [Labware!]!,
    tissue: [Tissue!]!,
}

input PlanRequestSource {
    barcode: String!,
    address: Address,
}

type OperationType {
    name: String!,
}

type PlanAction {
    source: Slot!,
    destination: Slot!,
    sample: Sample!,
    newSection: Int,
}

type PlanOperation {
    operationType: OperationType,
    planActions: [PlanAction!]!,
}

input PlanRequestAction {
    address: Address!,
    sampleId: Int!,
    sampleThickness: Int,
    source: PlanRequestSource!,
}

input PlanRequestLabware {
    labwareType: String!,
    barcode: String,
    actions: [PlanRequestAction!]!,
}

input PlanRequest {
    operationType: String!,
    labware: [PlanRequestLabware!]!,
}

input AddressCommentInput {
    address: Address!,
    commentId: Int!,
}

input ConfirmOperationLabware {
    barcode: String!,
    cancelled: Boolean,
    cancelledAddresses: [Address!],
    addressComments: [AddressCommentInput!],
}

input ConfirmOperationRequest {
    labware: [ConfirmOperationLabware!]!,
}

type Action {
    source: Slot!,
    destination: Slot!,
    operationId: Int!,
    sample: Sample!,
}

type Operation {
    operationType: OperationType!,
    actions: [Action!]!,
    user: User!,
    performed: Timestamp!,
}

type ConfirmOperationResult {
    labware: [Labware!]!,
    operations: [Operation!]!,
}

type PlanResult {
    labware: [Labware!]!,
    operations: [PlanOperation!]!,
}

type Printer {
    name: String!,
    labelType: LabelType!,
}

type Comment {
    id: Int!,
    text: String!,
    category: String!,
}

type Query {
    user: User,
    tissueTypes: [TissueType!]!,
    labwareTypes: [LabwareType!]!,
    hmdmcs: [Hmdmc!]!,
    mediums: [Medium!]!,
    fixatives: [Fixative!]!,
    mouldSizes: [MouldSize!]!,
    labware(barcode: String!): Labware!,
    printers(labelType: String): [Printer!]!,
    comments(category: String): [Comment!]!,
}

type Mutation {
    login(username: String!, password: String!): LoginResult!,
    logout: String,
    register(request: RegisterRequest!): RegisterResult!,
    plan(request: PlanRequest!): PlanResult!,
    printLabware(printer: String!, barcodes: [String!]!): String,
    confirmOperation(request: ConfirmOperationRequest!): ConfirmOperationResult!,
}
